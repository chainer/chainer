#include "chainerx/routines/pooling.h"

#include <algorithm>
#include <cstdint>
#include <string>
#include <vector>

#include <gtest/gtest.h>
#include <nonstd/optional.hpp>

#include "chainerx/array.h"
#include "chainerx/check_backward.h"
#include "chainerx/constant.h"
#include "chainerx/device_id.h"
#include "chainerx/shape.h"
#include "chainerx/stack_vector.h"
#include "chainerx/testing/array.h"
#include "chainerx/testing/array_check.h"
#include "chainerx/testing/device_session.h"
#include "chainerx/testing/routines.h"
#include "chainerx/testing/threading.h"

namespace chainerx {
namespace {

class PoolingTest : public ::testing::TestWithParam<std::string> {
protected:
    void SetUp() override {
        const std::string& backend_name = GetParam();
        device_session_.emplace(DeviceId{backend_name, 0});
    }

    void TearDown() override { device_session_.reset(); }

private:
    nonstd::optional<testing::DeviceSession> device_session_;
};

TEST_THREAD_SAFE_P(PoolingTest, MaxPool) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{3, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = testing::BuildArray(x_shape)
                      .WithData<T>(
                              {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                               0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                               0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                               0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                               0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                               0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                               0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                               0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                               0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                               0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                               0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                               0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                               0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                               0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                               0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                               0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                               0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                               0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                               0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                               0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                               0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                               0.87756634, 0.3690981,  0.6356852})
                      .WithPadding(1);  // Randomly generated.

    Array e_out = testing::BuildArray(out_shape).WithData<T>(
            {0.9677815,  0.9677815,  0.6074731,  0.97462624, 0.97462624, 0.80568856, 0.7416107,  0.34700692, 0.80568856, 0.8825699,
             0.8825699,  0.96131665, 0.8825699,  0.8825699,  0.99313796, 0.72154176, 0.8705839,  0.8913622,  0.56731504, 0.56731504,
             0.9328509,  0.8108767,  0.7060211,  0.40091372, 0.8108767,  0.04649203, 0.17163254, 0.6969235,  0.8935332,  0.99195975,
             0.92212546, 0.74829006, 0.99195975, 0.73161113, 0.3562581,  0.42987233, 0.99820083, 0.99820083, 0.6531855,  0.99820083,
             0.99820083, 0.99982584, 0.9059909,  0.9059909,  0.12874502, 0.76311666, 0.73357195, 0.73357195, 0.82812095, 0.88109905,
             0.9307932,  0.5138541,  0.88109905, 0.88109905, 0.93474656, 0.8462578,  0.8462578,  0.96989137, 0.96815336, 0.96815336,
             0.54361,    0.96815336, 0.96815336, 0.8556079,  0.9142884,  0.9142884,  0.8556079,  0.98927075, 0.99933624, 0.6295072,
             0.63463855, 0.99933624, 0.98111194, 0.82608557, 0.6107712,  0.98111194, 0.82608557, 0.7088349,  0.6449191,  0.7088349,
             0.7088349,  0.8171236,  0.7166788,  0.5830564,  0.8171236,  0.9575846,  0.9575846,  0.10768154, 0.9575846,  0.9575846,
             0.86659664, 0.1641238,  0.94771904, 0.86659664, 0.8357075,  0.7981461,  0.8357075,  0.8357075,  0.09764841, 0.9327884,
             0.9327884,  0.32184523, 0.87756634, 0.87756634, 0.6356852,  0.87756634, 0.87756634, 0.6356852});  // Computed with Chainer.

    Run([&]() {
        testing::CheckForward(
                [&kernel_size, &stride, &pad](const std::vector<Array>& xs) {
                    return std::vector<Array>{MaxPool(xs[0], kernel_size, stride, pad)};  // cover_all should be true
                },
                {x},
                {e_out});
    });
}

TEST_THREAD_SAFE_P(PoolingTest, MaxPoolNoCoverAll) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};
    bool cover_all = false;

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));
    Array x = testing::BuildArray(x_shape)
                      .WithData<T>(
                              {0.951628,   0.8341918,  0.5700014,  0.02573909, 0.10652946, 0.45143777, 0.12487986, 0.6040584,  0.7059066,
                               0.8674204,  0.89753157, 0.3271186,  0.22637007, 0.7894245,  0.9550997,  0.03499391, 0.6357232,  0.4714537,
                               0.26333022, 0.15744655, 0.69606817, 0.5913821,  0.1362648,  0.00700566, 0.6983082,  0.41985217, 0.19198065,
                               0.87712926, 0.01699107, 0.85048497, 0.6478966,  0.81732035, 0.47958362, 0.335237,   0.6713821,  0.1833262,
                               0.8953133,  0.8300278,  0.46769994, 0.76619476, 0.57752323, 0.60258865, 0.27085522, 0.79189676, 0.98663867,
                               0.50531614, 0.16972028, 0.9301859,  0.53940713, 0.42947277, 0.7620938,  0.4948149,  0.2600685,  0.8730976,
                               0.3494606,  0.9889337,  0.5368636,  0.4020234,  0.23665707, 0.41831595, 0.62009174, 0.7569111,  0.7489499,
                               0.60345465, 0.8451688,  0.84799254, 0.99623865, 0.0536505,  0.320729,   0.68655115, 0.9852334,  0.890243,
                               0.76959133, 0.3614867,  0.11742796, 0.7991817,  0.05568137, 0.22353998, 0.26920173, 0.5037702,  0.45541075,
                               0.45879447, 0.48008284, 0.57052517, 0.3782304,  0.637869,   0.45500278, 0.71749103, 0.9862718,  0.21877514,
                               0.10590941, 0.5953773,  0.46771872, 0.73789245, 0.4005024,  0.7518998,  0.9913527,  0.5310464,  0.4475842,
                               0.5483692,  0.965521,   0.8801182,  0.18907578, 0.95214474, 0.02703529, 0.51783687, 0.17790386, 0.40175965,
                               0.5297797,  0.7417257,  0.22830275, 0.5155725,  0.933218,   0.31846902, 0.9928533,  0.8593246,  0.8691987,
                               0.83518404, 0.69086736, 0.3735951,  0.65166473, 0.58173877, 0.8519384,  0.54010224, 0.03113064, 0.4510318,
                               0.674089,   0.76923084, 0.42310983, 0.31675196, 0.8791844,  0.01504437, 0.98128337, 0.8053975,  0.14322701,
                               0.9443598,  0.96856105, 0.46812293, 0.6314993,  0.6479647,  0.44749212, 0.9877724,  0.7250273,  0.49135047,
                               0.56493795, 0.6489228,  0.04269254, 0.20499802, 0.16736922, 0.7334596,  0.40343535, 0.06048108, 0.7591618,
                               0.63597775, 0.11817221, 0.2982908,  0.00329836, 0.27108955, 0.02329292, 0.69136006, 0.8659653,  0.24925236,
                               0.33170977, 0.02298746, 0.11057855, 0.06332088, 0.04107838, 0.86021507, 0.72832036, 0.44712546, 0.15952812,
                               0.44132948, 0.8370784,  0.46001586, 0.14595562, 0.18176174, 0.68951994, 0.37592548, 0.0262325,  0.40434295,
                               0.05052375, 0.05624698, 0.10016874, 0.9320143,  0.09351984, 0.53812116, 0.20279366, 0.22279656, 0.33266315,
                               0.8101899,  0.6632538,  0.64406633})
                      .WithPadding(1);  // Randomly generated.

    Array e_out = testing::BuildArray(out_shape).WithData<T>(
            {0.951628,   0.8341918,  0.6040584,  0.8674204, 0.9550997,  0.9550997,  0.69606817, 0.5913821,  0.26333022, 0.85048497,
             0.85048497, 0.87712926, 0.8953133,  0.8300278, 0.76619476, 0.98663867, 0.8300278,  0.9301859,  0.8730976,  0.8730976,
             0.9889337,  0.8730976,  0.8730976,  0.9889337, 0.84799254, 0.99623865, 0.99623865, 0.76959133, 0.9852334,  0.9852334,
             0.637869,   0.637869,   0.71749103, 0.9862718, 0.73789245, 0.7518998,  0.9913527,  0.8801182,  0.95214474, 0.965521,
             0.8801182,  0.95214474, 0.933218,   0.9928533, 0.9928533,  0.8691987,  0.8519384,  0.8519384,  0.98128337, 0.8791844,
             0.9443598,  0.9877724,  0.9877724,  0.9443598, 0.7334596,  0.7334596,  0.40343535, 0.7591618,  0.7334596,  0.69136006,
             0.8659653,  0.33170977, 0.86021507, 0.8370784, 0.46001586, 0.86021507, 0.68951994, 0.37592548, 0.9320143,  0.8101899,
             0.8101899,  0.9320143});  // Computed with Chainer.

    Run([&]() {
        testing::CheckForward(
                [&kernel_size, &stride, &pad, &cover_all](const std::vector<Array>& xs) {
                    return std::vector<Array>{MaxPool(xs[0], kernel_size, stride, pad, cover_all)};
                },
                {x},
                {e_out});
    });
}

TEST_THREAD_SAFE_P(PoolingTest, MaxPoolNdNoCoverAll) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{3, 4, 2};
    StackVector<int64_t, kMaxNdim> kernel_size{2, 3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0, 0};
    Shape out_dims{2, 2, 1};
    bool cover_all = false;

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));
    Array x = testing::BuildArray(x_shape)
                      .WithData<T>(
                              {0.7443965,  0.466585,   0.89991057, 0.6011775,  0.44392627, 0.01212001, 0.6850019,  0.15243967, 0.8667199,
                               0.2442128,  0.67573136, 0.36785454, 0.09906764, 0.32006702, 0.2941192,  0.06906214, 0.4547633,  0.08570488,
                               0.9805615,  0.63515943, 0.9235444,  0.31874985, 0.2922623,  0.8424672,  0.45487508, 0.51142967, 0.56195277,
                               0.16178702, 0.1434154,  0.47948307, 0.2100758,  0.78299475, 0.8435794,  0.5551395,  0.04787049, 0.09631719,
                               0.6097444,  0.8657279,  0.5092905,  0.8237162,  0.05624367, 0.84043086, 0.38281146, 0.7083898,  0.62722075,
                               0.46664056, 0.09982199, 0.92381614, 0.31687415, 0.12311904, 0.28741708, 0.5918304,  0.28770503, 0.49405122,
                               0.09714395, 0.9132574,  0.17417444, 0.8113134,  0.78891706, 0.03142597, 0.21724015, 0.08166417, 0.36335734,
                               0.5147829,  0.90494955, 0.773586,   0.5918902,  0.76111,    0.80608964, 0.62303025, 0.00699759, 0.11845457,
                               0.43313235, 0.39260346, 0.40701154, 0.42705905, 0.8120061,  0.8751227,  0.02269243, 0.56490266, 0.08994114,
                               0.09752213, 0.03915177, 0.34548464, 0.00377442, 0.51944125, 0.51867104, 0.25035092, 0.798595,   0.32923198,
                               0.7179019,  0.41776162, 0.95809466, 0.8846349,  0.55489767, 0.8336697,  0.21122925, 0.00538924, 0.9620717,
                               0.62521833, 0.7878091,  0.61587733, 0.82317215, 0.9371119,  0.89358616, 0.9317833,  0.5795524,  0.31719476,
                               0.54578173, 0.5663842,  0.747692,   0.7661823,  0.5601869,  0.11197416, 0.62696815, 0.2306318,  0.2143333,
                               0.4452788,  0.36305067, 0.29281017, 0.3174274,  0.8824883,  0.9707816,  0.78411233, 0.39922863, 0.28274158,
                               0.06927383, 0.27824947, 0.22943017, 0.930709,   0.6542054,  0.7272992,  0.48424295, 0.84909654, 0.7025952,
                               0.6957209,  0.7256895,  0.04510942, 0.15335312, 0.13091847, 0.5440975,  0.91838336, 0.55018735, 0.90877193,
                               0.44614205, 0.16832489, 0.01301944, 0.7548129,  0.73603594, 0.3235329,  0.69175094, 0.01074168, 0.16911024,
                               0.5299289,  0.7601291,  0.1179313,  0.33019885, 0.7097442,  0.688629,   0.2579612,  0.0695068,  0.35770202,
                               0.7073006,  0.05640914, 0.33988833, 0.7262268,  0.07806166, 0.9277037,  0.9180163,  0.84556764, 0.6071359,
                               0.42290464, 0.84606487, 0.3651215,  0.81922746, 0.10985906, 0.17247076, 0.7533703,  0.49501455, 0.15220903,
                               0.99647135, 0.42380828, 0.6003359,  0.22504759, 0.875422,   0.58578616, 0.9366149,  0.11690569, 0.42420593,
                               0.5917886,  0.70683753, 0.8183978,  0.4756214,  0.66599804, 0.5966581,  0.7142323,  0.0447604,  0.7221806,
                               0.40729043, 0.74232286, 0.16300161, 0.49036905, 0.978541,   0.07254261, 0.6489491,  0.92357546, 0.00269184,
                               0.08422355, 0.02356908, 0.65819466, 0.68853575, 0.71612203, 0.56305516, 0.12719513, 0.7743897,  0.451732,
                               0.8025118,  0.12570524, 0.08991196, 0.6524047,  0.49495652, 0.40224484, 0.86370593, 0.08105256, 0.36082205,
                               0.754245,   0.6098171,  0.94351375, 0.9433489,  0.8337473,  0.9479238,  0.3690827,  0.19420643, 0.86682785,
                               0.699835,   0.82302284, 0.37547496, 0.45134047, 0.4901204,  0.5570143,  0.44694754, 0.04374322, 0.65735126,
                               0.49562973, 0.5227552,  0.73393095, 0.84942234, 0.7592201,  0.86141664, 0.533247,   0.09745267, 0.2624992,
                               0.4333376,  0.40258995, 0.51826745, 0.5248199,  0.78600687, 0.5420168,  0.81095344, 0.01150763, 0.07383808,
                               0.7823987,  0.328573,   0.24309944, 0.50480926, 0.26718357, 0.5933533,  0.82193506, 0.8797568,  0.5687586,
                               0.8594091,  0.82480854, 0.8240346,  0.7362367,  0.6144636,  0.1727837,  0.50839895, 0.6949624,  0.29187527,
                               0.49906296, 0.255307,   0.520505,   0.4900493,  0.03956361, 0.08103298, 0.64027756, 0.6599848,  0.5945138})
                      .WithPadding(1);  // Randomly generated.

    Array e_out = testing::BuildArray(out_shape).WithData<T>(
            {0.89991057, 0.89991057, 0.9805615,  0.9805615,  0.56195277, 0.78299475, 0.8657279, 0.92381614, 0.5918304,  0.9132574,
             0.90494955, 0.80608964, 0.8751227,  0.8751227,  0.95809466, 0.95809466, 0.9620717, 0.9620717,  0.9317833,  0.7661823,
             0.9707816,  0.9707816,  0.930709,   0.91838336, 0.7548129,  0.7548129,  0.7601291, 0.9277037,  0.9180163,  0.84606487,
             0.99647135, 0.99647135, 0.7221806,  0.74232286, 0.978541,   0.978541,   0.8025118, 0.86370593, 0.94351375, 0.9479238,
             0.73393095, 0.84942234, 0.86141664, 0.81095344, 0.8797568,  0.8797568,  0.8240346, 0.6949624});  // Computed with Chainer.

    Run([&]() {
        testing::CheckForward(
                [&kernel_size, &stride, &pad, &cover_all](const std::vector<Array>& xs) {
                    return std::vector<Array>{MaxPool(xs[0], kernel_size, stride, pad, cover_all)};
                },
                {x},
                {e_out});
    });
}

TEST_P(PoolingTest, MaxPoolBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{3, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1);

    Array eps = Full(x.shape(), 1e-3f);

    CheckBackward(
            [&](const std::vector<Array>& xs) -> std::vector<Array> { return {MaxPool(xs[0], kernel_size, stride, pad)}; },
            {x},
            {go},
            {eps},
            2U,
            1e-6,
            1e-3);
}

TEST_P(PoolingTest, MaxPoolNoCoverAllBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};
    bool cover_all = false;

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1);

    Array eps = Full(x.shape(), 1e-3f);

    CheckBackward(
            [&](const std::vector<Array>& xs) -> std::vector<Array> { return {MaxPool(xs[0], kernel_size, stride, pad, cover_all)}; },
            {x},
            {go},
            {eps},
            2U,
            1e-6,
            1e-3);
}

TEST_P(PoolingTest, MaxPoolDoubleBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{3, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = (*testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1)).RequireGrad();
    Array ggx = testing::BuildArray(x_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1);

    Array x_eps = Full(x_shape, 1e-3f);
    Array go_eps = Full(out_shape, 1e-3f);

    CheckDoubleBackwardComputation(
            [&](const std::vector<Array>& xs) -> std::vector<Array> {
                Array y = MaxPool(xs[0], kernel_size, stride, pad);
                return {y * y};
            },
            {x},
            {go},
            {ggx},
            {x_eps, go_eps},
            2,
            1e-2,
            1e-3);
}

TEST_P(PoolingTest, MaxPoolDoubleBackwardNoCoverAll) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = (*testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1)).RequireGrad();
    Array ggx = testing::BuildArray(x_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1);

    Array x_eps = Full(x_shape, 1e-3f);
    Array go_eps = Full(out_shape, 1e-3f);

    CheckDoubleBackwardComputation(
            [&](const std::vector<Array>& xs) -> std::vector<Array> {
                Array y = MaxPool(xs[0], kernel_size, stride, pad, false);
                return {y * y};
            },
            {x},
            {go},
            {ggx},
            {x_eps, go_eps},
            2,
            1e-2,
            1e-3);
}

TEST_THREAD_SAFE_P(PoolingTest, AveragePoolPadModeIgnore) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 1};
    Shape out_dims{2, 5};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = testing::BuildArray(x_shape)
                      .WithData<T>(
                              {0.04111816, 0.3959206,  0.59770286, 0.7072629,  0.00161628, 0.02329957, 0.17256668, 0.76854163, 0.5078777,
                               0.8288854,  0.67396593, 0.6960051,  0.2134179,  0.5772389,  0.9447065,  0.63826257, 0.7606064,  0.6712614,
                               0.42807406, 0.7962403,  0.5782779,  0.99229723, 0.78797174, 0.9342696,  0.4537535,  0.5068998,  0.571127,
                               0.34301794, 0.9293641,  0.9950814,  0.05563594, 0.7624619,  0.8618986,  0.40691194, 0.4721925,  0.01323885,
                               0.18152322, 0.43300477, 0.5697569,  0.9361073,  0.88511115, 0.4650921,  0.17667264, 0.8073688,  0.8385713,
                               0.49258915, 0.34233838, 0.68456537, 0.59591603, 0.986527,   0.55733263, 0.2831865,  0.81126785, 0.47739545,
                               0.11788672, 0.16269702, 0.72527087, 0.0213109,  0.4793418,  0.62425375, 0.46470466, 0.70615286, 0.34068778,
                               0.20068386, 0.5559034,  0.7922794,  0.3104979,  0.3302522,  0.3638358,  0.44471955, 0.6266817,  0.5661322,
                               0.10524972, 0.8878079,  0.71960807, 0.29803625, 0.62220067, 0.8521443,  0.7973632,  0.3990472,  0.15871674,
                               0.66307056, 0.19327427, 0.1667628,  0.18854427, 0.4062408,  0.63980705, 0.43811622, 0.30360684, 0.38295442,
                               0.65824556, 0.48718473, 0.7422023,  0.00495673, 0.778232,   0.6318709,  0.65450865, 0.8123173,  0.8846986,
                               0.3804735,  0.49662533, 0.45833296, 0.71569294, 0.11066612, 0.575554,   0.87404996, 0.5475344,  0.171025,
                               0.6243703,  0.08768418, 0.04540805, 0.27144453, 0.17868334, 0.6604113,  0.04590961, 0.24120222, 0.67163736,
                               0.10111471, 0.15298064, 0.9576477,  0.53733456, 0.04660584, 0.5835625,  0.36089227, 0.4853898,  0.6394757,
                               0.12848683, 0.42699087, 0.53672624, 0.29616517, 0.3730637,  0.4705316,  0.55910015, 0.7887553,  0.1223882,
                               0.23451962, 0.64177746, 0.8530148,  0.6567563,  0.38243204, 0.05124434, 0.30664146, 0.20206152, 0.8488157,
                               0.61715376, 0.72515976, 0.86220247, 0.43126792, 0.36947304, 0.26682702, 0.96569616, 0.16090332, 0.7704149,
                               0.06865951, 0.21292743, 0.39914876, 0.48880142, 0.16596344, 0.32630268, 0.7997324,  0.08092587, 0.9522901,
                               0.6519297,  0.9275221,  0.08514766, 0.3531865,  0.7026668,  0.92298347, 0.12314566, 0.94501054, 0.34853613,
                               0.4835937,  0.77357024, 0.23409165, 0.9949019,  0.74281377, 0.42908627, 0.00914412, 0.520662,   0.10387582,
                               0.19606356, 0.5837892,  0.38052484, 0.29912153, 0.7963204,  0.35009366, 0.17303354, 0.629219,   0.7294867,
                               0.1968342,  0.5656382,  0.0296214})
                      .WithPadding(1);  // Randomly generated.

    Array e_out = testing::BuildArray(out_shape).WithData<T>(
            {0.02136722, 0.11548865, 0.29737243, 0.5615185,  0.7379023,  0.24097063, 0.3587226,  0.5367772,  0.6490081,
             0.7009364,  0.6694422,  0.7506107,  0.7199011,  0.73663896, 0.865255,   0.6537985,  0.74261236, 0.6515022,
             0.5757474,  0.67991644, 0.52171093, 0.4708346,  0.47046655, 0.4978239,  0.47467306, 0.6350686,  0.5493153,
             0.41324234, 0.58613485, 0.80934715, 0.70359194, 0.7177766,  0.5347855,  0.2802757,  0.22294176, 0.6670811,
             0.53435045, 0.35712925, 0.32092515, 0.32921156, 0.4598696,  0.5391846,  0.54354465, 0.45839098, 0.44819218,
             0.36376205, 0.545993,   0.72138745, 0.5678114,  0.42107186, 0.1736305,  0.3541431,  0.47559816, 0.3594901,
             0.3024395,  0.41145113, 0.33808422, 0.4784061,  0.6055761,  0.5190573,  0.575567,   0.60544604, 0.7177605,
             0.52288276, 0.24556981, 0.56551653, 0.5194361,  0.45478377, 0.3102952,  0.18437855, 0.42516035, 0.40296167,
             0.24010405, 0.34943503, 0.59942496, 0.56478727, 0.41359296, 0.27537104, 0.4350935,  0.5818436,  0.5479132,
             0.54518676, 0.3950931,  0.30012578, 0.35252562, 0.417374,   0.53342223, 0.4882696,  0.4078289,  0.48858914,
             0.4933134,  0.49465337, 0.7049714,  0.6050174,  0.29608563, 0.54289645, 0.35502324, 0.33439603, 0.4774518,
             0.4532615,  0.08303677, 0.36788753, 0.66501826, 0.8012755,  0.9252528,  0.32728785, 0.4190254,  0.59639895,
             0.69924927, 0.7164636,  0.31257492, 0.3045208,  0.37353006, 0.32604605, 0.20149867, 0.5739569,  0.4754313,
             0.3749856,  0.34619308, 0.31932065});  // Computed with Chainer.

    Run([&]() {
        testing::CheckForward(
                [&kernel_size, &stride, &pad](const std::vector<Array>& xs) {
                    return std::vector<Array>{AveragePool(xs[0], kernel_size, stride, pad, AveragePoolPadMode::kIgnore)};
                },
                {x},
                {e_out});
    });
}

TEST_THREAD_SAFE_P(PoolingTest, AveragePoolPadModeZero) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = testing::BuildArray(x_shape)
                      .WithData<T>(
                              {0.31122229, 0.05158559, 0.33993888, 0.9460893,  0.27191108, 0.2381543,  0.03893513, 0.09761758, 0.7090799,
                               0.12660131, 0.9663294,  0.31341836, 0.3894651,  0.88922316, 0.69900507, 0.1935857,  0.80109537, 0.16098218,
                               0.74178326, 0.5044243,  0.66626763, 0.55027574, 0.11505534, 0.81060207, 0.39493027, 0.83966255, 0.8493714,
                               0.30618322, 0.00144243, 0.35579014, 0.5008343,  0.8213789,  0.01563315, 0.5083327,  0.33620742, 0.74299693,
                               0.5455363,  0.6101207,  0.10738087, 0.33540642, 0.41971886, 0.44905394, 0.434647,   0.26847488, 0.35128555,
                               0.33466363, 0.3017992,  0.24746853, 0.24618448, 0.5920125,  0.764586,   0.9962583,  0.69935316, 0.73866904,
                               0.18932493, 0.94885725, 0.08030719, 0.0479761,  0.18923728, 0.6384331,  0.18239649, 0.5881152,  0.58464485,
                               0.5944854,  0.800133,   0.30877692, 0.28807878, 0.6439913,  0.6647849,  0.5365079,  0.87859714, 0.41754505,
                               0.2910325,  0.10665622, 0.28932396, 0.4203566,  0.1540947,  0.77721155, 0.4442965,  0.18877557, 0.78295624,
                               0.22970995, 0.6536651,  0.2703293,  0.6547004,  0.9992697,  0.4345181,  0.5686483,  0.95156795, 0.67195773,
                               0.6940681,  0.6261903,  0.7289303,  0.4981551,  0.76853746, 0.6067942,  0.6341964,  0.5301991,  0.9645502,
                               0.76086897, 0.9045328,  0.1000107,  0.8057428,  0.05551982, 0.8495385,  0.16674334, 0.76123047, 0.67485523,
                               0.2056708,  0.1196645,  0.89697844, 0.8260616,  0.37178105, 0.96236604, 0.6980037,  0.04943768, 0.31795603,
                               0.7087103,  0.645189,   0.23861937, 0.3959649,  0.00625502, 0.29209566, 0.8501292,  0.44874,    0.24106628,
                               0.7340081,  0.15615046, 0.31728542, 0.02612323, 0.67237496, 0.67294765, 0.29989582, 0.001548,   0.05200001,
                               0.7017594,  0.6616423,  0.9471744,  0.7988943,  0.0306711,  0.57371724, 0.63207084, 0.8346429,  0.21166071,
                               0.17302284, 0.81133926, 0.11149591, 0.4937171,  0.21388526, 0.30486584, 0.6693677,  0.18343925, 0.16053087,
                               0.6196803,  0.09049366, 0.3998863,  0.15157019, 0.5786722,  0.48928276, 0.00157643, 0.45730975, 0.46896055,
                               0.5805487,  0.3170786,  0.92821,    0.0956114,  0.5251651,  0.8869852,  0.7791487,  0.741993,   0.9602623,
                               0.8699757,  0.03432815, 0.35232133, 0.2907067,  0.29882476, 0.7748155,  0.15666589, 0.5417236,  0.3443893,
                               0.89063495, 0.14261667, 0.01162365, 0.6530233,  0.83770543, 0.03011509, 0.6158937,  0.6893652,  0.2213341,
                               0.64444274, 0.46360555, 0.34956232})
                      .WithPadding(1);  // Randomly generated.

    Array e_out = testing::BuildArray(out_shape).WithData<T>(
            {0.14547887, 0.11143565, 0.23709683, 0.43740582, 0.4930414,  0.38481522, 0.3631035,  0.2613494,  0.3619775,  0.46806145,
             0.5351649,  0.56723756, 0.27993715, 0.2603403,  0.25366527, 0.4517298,  0.37294424, 0.28252947, 0.37936988, 0.3807654,
             0.48317108, 0.38946953, 0.38966122, 0.5241638,  0.38503376, 0.3353268,  0.37136874, 0.42171463, 0.50543225, 0.4398158,
             0.4444394,  0.38619384, 0.32119346, 0.7507636,  0.67775106, 0.6164594,  0.3614898,  0.4000838,  0.43111363, 0.39102677,
             0.47506174, 0.6700647,  0.39346895, 0.50237817, 0.27187493, 0.35311544, 0.4378874,  0.48603192, 0.10747541, 0.12534103,
             0.349847,   0.5193414,  0.5443884,  0.4382714,  0.2505189,  0.3161781,  0.24300332, 0.33820078, 0.4587271,  0.30567434,
             0.32501528, 0.27838096, 0.38496295, 0.48860213, 0.4943433,  0.6386533,  0.3274555,  0.14210498, 0.25845996, 0.46114156,
             0.31804958, 0.46384564});  // Computed with Chainer.

    Run([&]() {
        testing::CheckForward(
                [&kernel_size, &stride, &pad](const std::vector<Array>& xs) {
                    return std::vector<Array>{AveragePool(xs[0], kernel_size, stride, pad, AveragePoolPadMode::kZero)};
                },
                {x},
                {e_out});
    });
}

TEST_P(PoolingTest, AveragePoolPadModeIgnoreBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1);

    Array eps = Full(x.shape(), 1e-3f);

    CheckBackward(
            [&](const std::vector<Array>& xs) -> std::vector<Array> {
                return {AveragePool(xs[0], kernel_size, stride, pad, AveragePoolPadMode::kIgnore)};
            },
            {x},
            {go},
            {eps},
            2U,
            1e-6,
            1e-3);
}

TEST_P(PoolingTest, AveragePoolPadModeZeroBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.1f).WithPadding(1);

    Array eps = Full(x.shape(), 1e-3f);

    CheckBackward(
            [&](const std::vector<Array>& xs) -> std::vector<Array> {
                return {AveragePool(xs[0], kernel_size, stride, pad, AveragePoolPadMode::kZero)};
            },
            {x},
            {go},
            {eps},
            2U,
            1e-6,
            1e-3);
}

TEST_P(PoolingTest, AveragePoolPadModeIgnoreDoubleBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.
    Array go = (*testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.01f).WithPadding(1)).RequireGrad();
    Array ggx = testing::BuildArray(x_shape).WithLinearData(-0.1f, 0.01f).WithPadding(1);

    Array x_eps = Full(x.shape(), 1e-3f);
    Array go_eps = Full(go.shape(), 1e-3f);

    CheckDoubleBackwardComputation(
            [&](const std::vector<Array>& xs) -> std::vector<Array> {
                Array y = AveragePool(xs[0], kernel_size, stride, pad, AveragePoolPadMode::kIgnore);
                return {y * y};
            },
            {x},
            {go},
            {ggx},
            {x_eps, go_eps},
            2,
            1e-6,
            1e-3);
}

TEST_P(PoolingTest, AveragePoolPadModeZeroDoubleBackward) {
    using T = float;

    int64_t batch_size = 3;
    int64_t channels = 4;
    Shape in_dims{4, 4};
    StackVector<int64_t, kMaxNdim> kernel_size{3, 2};
    StackVector<int64_t, kMaxNdim> stride{2, 1};
    StackVector<int64_t, kMaxNdim> pad{1, 0};
    Shape out_dims{2, 3};

    Shape x_shape{batch_size, channels};
    std::copy(in_dims.begin(), in_dims.end(), std::back_inserter(x_shape));
    Shape out_shape{batch_size, channels};
    std::copy(out_dims.begin(), out_dims.end(), std::back_inserter(out_shape));

    Array x = (*testing::BuildArray(x_shape)
                        .WithData<T>(
                                {0.4609564,  0.9677815,  0.08834644, 0.32941917, 0.8292747,  0.11845724, 0.1369321,  0.6074731,  0.78542763,
                                 0.97462624, 0.7587014,  0.27017736, 0.7416107,  0.25967184, 0.34700692, 0.80568856, 0.7809916,  0.42632404,
                                 0.00986403, 0.96131665, 0.3818825,  0.8825699,  0.32384965, 0.41834843, 0.04444144, 0.5976533,  0.13136163,
                                 0.99313796, 0.20961371, 0.72154176, 0.8705839,  0.8913622,  0.10679037, 0.13024911, 0.29701585, 0.9328509,
                                 0.29156446, 0.56731504, 0.08864314, 0.40091372, 0.77066797, 0.7060211,  0.09676889, 0.09575618, 0.8108767,
                                 0.04177126, 0.04649203, 0.17163254, 0.49008262, 0.6410025,  0.8935332,  0.06818897, 0.49048236, 0.6969235,
                                 0.03973121, 0.99195975, 0.92212546, 0.2568234,  0.74829006, 0.49562132, 0.73161113, 0.3562581,  0.09955528,
                                 0.42987233, 0.07259833, 0.02391367, 0.6531855,  0.2526743,  0.96925163, 0.99820083, 0.35440677, 0.45040762,
                                 0.8124794,  0.6873842,  0.3394505,  0.99982584, 0.37112013, 0.9059909,  0.12874502, 0.10643691, 0.21043272,
                                 0.22249077, 0.2507038,  0.38035834, 0.76311666, 0.58646417, 0.73357195, 0.70151967, 0.82812095, 0.45903125,
                                 0.854887,   0.9307932,  0.5138541,  0.00605829, 0.88109905, 0.05902579, 0.93474656, 0.516853,   0.80964804,
                                 0.6165152,  0.8065471,  0.4231297,  0.8462578,  0.12397768, 0.96989137, 0.13212852, 0.39432606, 0.8906301,
                                 0.54361,    0.05775663, 0.96815336, 0.44516703, 0.6066227,  0.10383689, 0.795366,   0.06057209, 0.8556079,
                                 0.32239342, 0.9142884,  0.52067345, 0.33631396, 0.337069,   0.98927075, 0.45864356, 0.05180012, 0.6295072,
                                 0.63463855, 0.99933624, 0.9241264,  0.2909103,  0.12271244, 0.43939343, 0.98111194, 0.82608557, 0.6107712,
                                 0.08100884, 0.6419318,  0.80480385, 0.24884045, 0.6263302,  0.40993217, 0.6449191,  0.7088349,  0.02296176,
                                 0.70677763, 0.7166788,  0.2855127,  0.39801753, 0.8171236,  0.23696144, 0.4529571,  0.5830564,  0.41618168,
                                 0.6569938,  0.73607063, 0.55866545, 0.10323327, 0.10768154, 0.9575846,  0.81976444, 0.6253338,  0.1517685,
                                 0.1641238,  0.94771904, 0.86659664, 0.0256371,  0.1406688,  0.107798,   0.2999732,  0.7015409,  0.7981461,
                                 0.09489103, 0.8165871,  0.8357075,  0.09764841, 0.05153274, 0.8971699,  0.9327884,  0.32184523, 0.15035488,
                                 0.29527086, 0.34706247, 0.08613685, 0.22496991, 0.28078404, 0.17121029, 0.4556634,  0.5025214,  0.7903231,
                                 0.87756634, 0.3690981,  0.6356852})
                        .WithPadding(1))
                      .RequireGrad();  // Same values as the MaxPool test.

    Array go = (*testing::BuildArray(out_shape).WithLinearData(-0.1f, 0.01f).WithPadding(1)).RequireGrad();
    Array ggx = testing::BuildArray(x_shape).WithLinearData(-0.1f, 0.01f).WithPadding(1);

    Array x_eps = Full(x.shape(), 1e-3f);
    Array go_eps = Full(go.shape(), 1e-3f);

    CheckDoubleBackwardComputation(
            [&](const std::vector<Array>& xs) -> std::vector<Array> {
                Array y = AveragePool(xs[0], kernel_size, stride, pad, AveragePoolPadMode::kZero);
                return {y * y};
            },
            {x},
            {go},
            {ggx},
            {x_eps, go_eps},
            2,
            1e-6,
            1e-3);
}

TEST_P(PoolingTest, AveragePoolInvalidDtype) {
    Array x = Ones({2, 2, 3, 3}, Dtype::kInt32);
    EXPECT_THROW(AveragePool(x, {3, 3}, {1, 1}, {1, 1}, AveragePoolPadMode::kZero), DtypeError);
}

INSTANTIATE_TEST_CASE_P(
        ForEachBackend,
        PoolingTest,
        ::testing::Values(
#ifdef CHAINERX_ENABLE_CUDA
                std::string{"cuda"},
#endif  // CHAINERX_ENABLE_CUDA
                std::string{"native"}));

}  // namespace
}  // namespace chainerx
